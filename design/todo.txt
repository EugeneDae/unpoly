TODOs for next release
======================


Various changes
---------------

- Bad connections should not impact correctness
  - We should keep polling on a bad connection
    - Introduce up.radio.config.pollIntervalScale = function(interval) { up.network.shouldReduceRequests() ? 2 : 1 }
    - Do keep revalidating with reduced requests
- Consider whether we're version 2.7 or 3.0
- Polling
  - It would be great to *not* have a timeout running while we're in the background or offline
  - It would be great to not wait up to 10 seconds when we're re-focused or regain connectivity
- Go through visibilities
- https://github.com/unpoly/unpoly/issues/388
- onTransitionEnd
- can badResponseTime be a function that takes a request?
- Background requests
  - Don't trigger :late / progressBar
  - Default false
  - Default true for preload requests
  - Is deprioritized by the queue
    - It already deprioritizes preload requests
  - up.request({ background })
  - up.render({ background })
  - [up-background]
  - Default false
  - Docs in config.concurrency
- Bad up.fragment.toTarget()
  - Consider default { hungry: false } and only setting { hungry: true } für Navigation
  - Consider restricting the use of element names for toTarget()
    - up.fragment.config.goodTargetTags
      - html, head, body, main
- Breaking change: Consider sending :late und :recover events for every request
- Parse [up-abortable] for links
- toTarget
  - should we keep blank form?
    - if not we should accept a bad selector here for failure
- Move up.log.muteUncriticalRejections() to up.error


If we're launching V3
---------------------

- Ops need to give us a new site v2.makandra.de
- We need a separate Algolia index for v2
  - v3 would stay on "latest"





Offline / rework caching
------------------------

Our cache terminology is now inconsinstent with what's standard in HTTP specs and browsers.
Also we could get away with *never* cleaning the cache (just expiration).
This way we can keep using cached content if we're offline.

### TODOs

- Update up.Request.Cache
  - Rename #expiry => #evictAge
  - Introduce up.network.config.cacheEvictAge for use in Request.Cache
    - Default is 90 minutes
    - Maybe have a lower default when navigator.deviceMemory is known and < 2 GB
  - Evict entries when >= up.network.config.cacheEvictAge
  - With our long cache eviction background tabs could hog a lot of memory
    - Have a slow timeout that evicts old entries
      - Every 10 minutes would be slower than our test suite runs
  - We should really use the age of the response, not the time the request was cached (entry#timestamp in the current implementation)
    - have up.Request#responseAge which is 0 while there is no response, then delegates to up.Response#age
    - For this we need to track our { response } and also delegate in #followState(otherRequest)
  - Force-evict by LRU
    - Updates by #get()
  - We do not need to support the concept of "stale" here

- Rename up.network.config.cacheExpiry to up.network.config.cacheExpireAge
  - New default is 15 seconds (down from 5 minutes in Unpoly 2.6)
  - Some users have reduced this to 10 seconds or so

- New response props
  - @internal up.Response#expireAge (returns up.network.config.cacheExpireAge(response)
  - @internal up.Response#evictAge  (returns up.network.config.cacheEvictAge(response)
  - @stable up.Response#fresh (#age <= #expireAge)
  - @stable up.Response#stale (#age <= #evictAge)

- Revalidate on stale responses
  - Keep up.fragment.config.autoRevalidate
    - This way users can easily excempt a troublesome request from auto-revalidation, e.g. a blank form
    - It can now default to (response) => response.stale

- "Clearing" the cache is now "expiring" the cache
  - Rework X-Up-Clear-Cache
    - Rename to X-Up-Expire-Cache
    - Migrate old header
    - Remove X-Up-Expire-Clache: false
  - Rename up.network.config.clearCache to up.network.config.expireCache
  - Rename up.cache.clear(pattern) to up.cache.expire(pattern)
  - Rename [up-clear-cache] to [up-expire-cache]
  - Rename up.render({ clearCache }) to { expireCache })
  - Rename up.request({ clearCache }) to { expireCache })

- Update docs for confusing network config props
  - autoCache(request)      autoCache            "should we use the cache for a request with { cache: 'auto' }?"
  - expireCache(request)    "should we expire the entire cache or a pattern`"                (used to be clearCache)
  - cacheExpireAge          "how long is a cached response fresh"?                           (used to be cacheExpiry)
  - cacheEvictAge           "when do we remove an response from the cache entirely?"

- Rework up.Request
  - Rename up:request:fatal to up:request:offline
    - No { retry } function here. We could offer this one day, but then we need many options from https://www.npmjs.com/package/axios-retry
    - Offer up:fragment:offline
    - event.renderOptions
    - Offer an event.retry() method
      - This makes another render pass
      - This still fails the original render
      - Document as @experimental
  - Timeouts should be considered "offline", not "aborted"
    - Although timeouts are really client-side aborting, it's more useful to us to consider a timeouted resource to be offline

- Imperative eviction
  - Introduce X-Up-Evict-Cache
  - Introduce up.cache.evict(pattern)

- Test that being offline will still cause a stale cached response to render
  - Only the revalidation should fail with up:request:offline
  - { onFinished } callback should not fire (It should already work that way)
  - { onOffline } callback should still fire

- Ensure we have all the render callbacks
  - [up-on-aborted], { onAborted }
  - [up-on-offline], { onOffline }
  - Docs at [up-follow] and up.render()

- New topic page for "offline"
  - Document how to build an "you're offline. retry?" toast:
    - <a up-follow up-offline="if (confirm('Offline, retry?') event.retry()">
  - Explain that the initial request requires a service worker like the one from UpUp (no relation)

- up.link.cacheState(link)
  - Returns null, "fresh" or "stale"
  - Or do we need additional properties { response }, { clearAge }, { staleAge }?
  - Or just return the up.Response? It already has the properties above :)
  - What do we return when the request is in flight? => null

- Update up.link.preload()
  - up.link.preload() should not abortable by default
    - Document { abortable: false } option
  - Test that up.link.preload() will not preload a resource that is already cached

- Update unpoly-rails
  - Remove up.cache.keep
  - Rename up.cache.clear(pattern) to up.cache.expire(pattern)
  - Add up.cache.evict(pattern)

- Revalidation logic uses no/wrong guardEvents
  - Test that original guard event is not fired another time
  - Delete existing guardEvents when revalidating
  - Use a new guardEvent up:fragment:revalidate
    - This one is preventable
  - When done emit an event up:fragment:revalidated with the new up.RenderResult


Docs
----

### Target derivation

- Possibly own page
- Document which features require targetable elements
  - up.render(Element)
  - up.reload(Element)
  - [up-poll]
  - [up-hungry]
  - up.radio.config.hungrySelectors
    - Note that the configured selector will be re-derived
  - [up-viewport]

### Watch/validate rework

- Consider consolidating docs for
  - input[up-watch]/form[up-watch] as well as
  - input[up-validate]/form[up-validate]
  - input[up-autosubmit]/form[up-autosubmit]
  - ... so it's only "within the container"
- [up-watch-feedback], [up-watch-disable],  [up-watch-delay],  [up-watch-event]
  - [up-autosubmit] needs a params note saying that that attributes for [up-watch] may be used
  - [up-validate] needs a params note saying that that attributes for [up-watch] may be used
  - Explain that they can be set either on the form or on an input
- New obserrve options are not documented everywhere
  - form[up-autosubmit]
  - input[up-autsubmit]
  - input[up-watch]
  - form[up-watch]
- Docs for up.validate()
  - { feedback, disable, delay, event }
  - Explain that you can use it both on containers and individual fields
- New watch() and validate() options
  - { feedback, disable, delay, event }
- Document all the ways we prevent concurrency
  - In up.watch()
  - In up.validate()
  - Document that multiple [up-validate] requests are merged into a single request
- Test and Document that we can use live validation like this:
  <input up-keep up-validate up-watch-event="input">
- Document that X-Up-Validate may contain multiple names
- Document that X-Up-Validate may contain :unknown
- Explain and test [up-validate] usage for radio buttons
- [up-watch-delay] attribute should always be optional; Explain how it often defaults to up.form.config.watchInputDelay


### Other docs

- Consider replacing type|undefined with type? in all type comments
- Go through TODO
- Consider a new page for defaults
  - Explain that most opts are opt-in
  - Explain navigation defaults
  - Explain config objects
  - Explain auto-Configs
- Missing doc for up.render({ clearCache }) (but we do document [up-clear-cache])
- Document { abort } option and [up-abort] everywhere
- Überall wo [up-target] oder { target } dokumentiert ist nach https://unpoly.com/fragment-placement verlinken
- Document django-forms-dynamic for [up-validate]
  - https://twitter.com/j4mie/status/1471610935924215815?t=KtCISFJXz3kEMoc6C3y4UQ&s=09
  - https://github.com/dabapps/django-forms-dynamic
- Consider a new page for caching and revalidation
- up.form.config.inputEvents
- up.form.config.changeEvents
- up.form.config.inputDelay
- Missing docs for render options
  - { revealTop }
  - { revealMax }
  - { revealPadding }
  - { revealSnap }
  - { scrollBehavior }
    - if we stop auto-set it to auto, otherwise stop parsing this



Icebox
======

- Consider using `Cache-Control: stale-while-revalidate=<seconds>` to indicate how long we can use a response
  - But it could be paired like this: Cache-Control: max-age=1, stale-while-revalidate=59
  - But then again we ignore Cache-Control for all other purposes
    - E.g. Cache-Control: no-store
    - E.g. Cache-Control: max-age
    - How would Cache-Control: no-cache (equivalent of max-age=0 must-revalidate) work in connection with up.fragment.config.autoRevalidate ?
  - Maybe do a bigger workover of Cache-Control?
- Do follow links with [target=_self]
- up:click forking could print a warning when an a[href] is instant, but not followable
- Is it weird that up.layer.affix appends to the first swappable element instead of the contentElement?
  - It's actually more like "appendableElement"
  - Maybe offer up.Layer#append
- Consider exposing up.layer.contentElement
- Do we want a shortcut macro for this:
      <input up-validate up-keep up-watch-event="input">
  - <input up-live-validate>
  - It's weird for users who don't target the input. They may expect to just override the event.
- We could support this with more pseudo-class selectors like :form-group and :submit-button
  - :submit-button is hard to build origin-aware => It could just be a substitution with :is() / :-moz-any() & :-webkit-any()
  - :form-group is also supper hard to support in a selector like ".foo, :form-group, :bar" due to the way we hacked :has()
    - :has() is still behind a flag in Chrome and no Firefox support
- Introduce boundaries or "softly isolated zones"
  - The idea started with: Should fragment lookups with an { origin } within a form prefer to look within the form?
    - Also related to https://github.com/unpoly/unpoly/issues/197 , which would no longer work
      now that a form submission's orgin is the submit button instead of the form element
  - E.g. <div up-boundary>
    - Lookups within prefer to match within the boundary
    - It's a new fallback target
      - Also for errors
    - up.fragment.config.boundaryTargets = ['[up-boundary]', 'form', ':main']
    - Is this also controlled by { fallback }?
    - Maybe identification using [up-boundary=123]
      - But don't enforce this, it's not a great auto-target
    - Should this rather be [up-zone]?
      - If we ever make fully isolated containers we would call them frames
        - https://github.com/unpoly/unpoly/discussions/350
    - We could also offer :zone as a selector
    - Would we still offer { target: '.container .child' }?
      - Would we offer { target: ':zone .foo' }, since it's really the same as { target: '.foo' } ?
    - Is this a repetition of "fragment needs to know whether it is used as component or main target"?
      - We would need to fix infinite looping in expandTargets()
      - It would be nice to disable history in a zone
        - but then it's not usable as a main target
        - Disable history in a container?
          - It's weird to nest multiple containerish elements
        - => This is really already solved through { history: 'auto' }, which only updates history if updating :main
- Rendering: allow { scrollBehavior: 'smooth' } when we're not morphing
  - Could we even allow this *when* morphing?
- What is the purpose of up.error.emitGlobal?
  - Don't we throw a compound error that would be tracked?
    - We do
    - But the error does not bubble up
    - What do we want here?
- New up.render() options to clone from a template
  - { documentTemplate }, { fragmentTemplate }, { contentTemplate }
  - Separate doc page "Rendering from local content"
  - Fail when template cannot be found
  - But what if I really need to re-use an existing element that is then placed back into the body, like in WB?
- Consider implementing an abortable up:navigate event
  - This would be the first feature that goes beyond "navigation is just a preset"
  - People might expect history changes to trigger this
  - Maybe think about this more
- Allow to prevent Unpoly's state restoration handling with a preventable up:history:restore
  - We're currently forwarding an event up:history:restore to up:location:changed, but that was never public API
- Replace up.hello() and up.syntax.clean() to MutationObserver()
- Do we want to serialize all actions in a form?
  - up-sequence="form"
  - This would need to abortable on submit => Would be handled by existing { solo: 'target' } IF there is a request
  - This would need to abortable on form destroy => Would be handled by existing { solo: 'target' } IF there is a request
  - => This would need to be handled by up.Queue, or else there would be nothing to abort
  - => It is not sufficient to have up.form.sequence(..., callback)
  - => We would need to do something like { sequence: ElementOfSubtree }
  - => Before picking a new request, make sure no existing request exists
  - What about our old idea: { order: 'abort target', order: 'abort form', order: 'after form', order: 'after selector' }
      => How to say "after ElementObject" ?
  - Who would fetch the element that is 'form' or 'selector'?
      => up.Change.UpdateLayer#getPreflightProps(), which already loads targetElements()
  - What would we do if both was given, e.g. { solo: true, sequence: 'form' }
    - Do we forbid the combination?
    - Do we first abort, then do a squence?
    - Do we first wait, then abort? => I think this, but this also means our { solo } handling is in the wrong place. It must move to the queue.
  - Does { sequence: 'form' } also queue local content, like { solo } ?
   - We could do something like up.LocalRequest, but then local updates would no longer be sync!
   - We could not support { sequence } for local updates => YES
  - What about cached content with { sequence }?
    - We could do queue.asapLocal() which immediately executes unless there is { sequence }
  - How does queue resolve a sequence?
    - Before dispatching a request with { sequence }
    - Check if we have *current* requests with { sequence }
    - If any of the other requests's sequence contains our *or* if any other sequence is contained by ours, don't dispatch
- Guard Events for Rendering could have a Promise for "done"
  - Is this better than setting event.renderOptions.onFinished()?
    - Yes, because onFinished may not fire for fatals or prevented up:fragment:loaded
  - How would this work together with future up.RenderRequest?
  - How would this work together with "local changes are sync"?
- Consolidate [up-validate], [up-switch] and [up-watch] into a tree of form dependencies
  - This way we can selectively disable parts of the form
- Functionality that checks for isDetached() should probably also check for .up-destroying
- Improve `{ focus: 'keep' }` so it focuses the former form group if we lose focus
  - This may be easier said than done
    - we would need to remember the original form group before the swap in the FocusCapsule
    - re-discover the form group in the new HTML
    - check that the form group is a closer match than target-if-lost
    - come up for a better name for the option (target-if-lost)
- New event up:request:solo ?
- Consider delaying appending of new layer elements until we have constructed all children https://github.com/unpoly/unpoly/discussions/314
- Publish { onQueued }
  - More canonic would be if up.render() returned a up.RenderRequest, which has abort().
- Wir aborten bereits laufende [up-validate] wenn das Formular submitted, wird, aber laufende Watcher-Delays warten können danach noch Dinge tun
  - Wie wäre "submit stoppt das delay"?
  Evtl. Warnung ausbauen: "Will not watch fields without [name]"
- [up-emit] auf Buttons erlauben
- Beim Schließen des Modals prevented jemand up:layer:dismiss, und dann steht "Abort Error: Close event was prevented" in der Konsole.
  - Wollen wir das schlucken?
  - Zumindest bei ui-elementen wie [up-dismiss] ?
- DestructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.destroy() noch zu Ende läuft, dann aber up.CompilerError wirft.
- ConstructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.render() oder up.hello() noch zu Ende läuft, dann aber mit up.CompilerError rejected.
- Update "Long Story" Slides with new API
- Doc page about "Fragments from local HTML"
  - link from [up-document], [up-fragment], [up-content], { document, fragment, content }.
- Warn when registering compiler in [up-] namespace


Decisions
=========

- Should the old "clear" be "expire" or "evict"?
  => We really want to push our new defaults for both
  => I think it should be "expire". Most users set a lower expire time.
- remove up.util.flatMap() => No, we need it to flatMap array-like objects (e.g. arguments)

- New event up:request:solo ?
- Consider delaying appending of new layer elements until we have constructed all children https://github.com/unpoly/unpoly/discussions/314
- CheapEnergy hatte bedarf auf "[up-validate] on input"
- Publish { onQueued }
  - More canonic would be if up.render() returned a up.RenderRequest, which has abort().
- Wir aborten bereits laufende [up-validate] wenn das Formular submitted, wird, aber laufende Observer-Delays warten können danach noch Dinge tun
  - Wie wäre "submit stoppt das delay"?
  Evtl. Warnung ausbauen: "Will not observe fields without [name]"
- [up-emit] auf Buttons erlauben
- [up-validate] can leak request when following a link from within a dirty field
  - Feld mit [up-validate] ändern
  - Direkt auf Navi-Link mit [up-instant] klicken
  - Dann kommt erst der Navi, Request, dann noch der [up-validate] Request
  - Wenn der [up-validate]-Request zurückkommt, gibt es das Feld nicht mehr
  - Der `change` Event wird zwar mit mousedown ausgelöst, kommt in der Event-Reihenfolge aber nach mousedown!
  - Das kann man auch nicht fixen wenn man mit dem mousedown-Handler 1 Microtask wartet
  => Wir könnten, bevor wir einem [up-instant] Link folgen vorher noch das aktuell fokussierte [input] blurren. Dann kommt der change-Event nämlich sofort.
  => Erhalten [up-instant]-Links aktuell überhaupt Fokus? Sie sollten sich so verhalten wie normale Links.
- Beim Schließen des Modals prevented jemand up:layer:dismiss, und dann steht "Abort Error: Close event was prevented" in der Konsole.
  - Wollen wir das schlucken?
  - Zumindest bei ui-elementen wie [up-dismiss] ?
- DestructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.destroy() noch zu Ende läuft, dann aber up.CompilerError wirft.
- ConstructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.render() oder up.hello() noch zu Ende läuft, dann aber mit up.CompilerError rejected.

- Update "Long Story" Slides with new API
- Doc page about "Fragments from local HTML"
  - link from [up-document], [up-fragment], [up-content], { document, fragment, content }.
- Warn when registering compiler in [up-] namespace
- Do we need window.history.scrollRestoration = 'manual' ?
  - Is this setting per-state?

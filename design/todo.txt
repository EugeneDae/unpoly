TODOs for next release
======================
                                               Automatischer Field-Finder                  Explicit
-------------------------------------------------------------------------------------------------------------------------------------
Ich möchte eine Feld-Gruppe validieren         up.validate(field)                          up.validate(':form-group', origin: field)    (oder automatischer lookup WENN ich field habe?)

Ich möchte das ganze Form validieren           up.validate(form)                           up.validate(form)  [aber disable muss hier explizit gegeben werden]

Ich möchte ein bestimmtes Ziel validieren      up.validate(form, target: '.total-price')   up.validate('.total-price')

X-Up-Validate                                  passt                                       nicht machbar



Concurrency
-----------

- Should { disable: 'selector' } disable all matches?
  - Yes!
- I find it counter-intuitive that this does not work:
  <form>
    <div up-disable=".target">
      <input type="radio" ...>
      <input type="radio" ...>
    </div>
  </div>
  (it must be up-observe-disable)

- Polish form.config options
  - form.config.inputEvent => form.config.observeInputEvent
  - form.config.inputDelay => form.config.observeInputDelay
  - form.config.changeEvent => form.config.observeChangeEvent
  - Remove 'change' from up.form.config.inputEvent
- Is up.validate() inconsistent with its args?
  - up.validate(element) follows an [up-validate] attr or seeks a form group
  - However, up.validate(selector) directly invalidates the given selector. It does not follow [up-validate].
    - This also breaks compatibility!
  - Do we need up.invalidate(target) ?
    - Is this the same as up.validate(form, { target })?
  - I don't think we do anything with the { target } option currently?
    - This is already public API
    - This should make its own solution, overriding all the other defaults
      - Also when doing up.validate(container, { target })
        - We would make multiple dirty solution with the
- Should up.validate(container) work?
  - Invalidate each contained field?
  - We currently only use render options from the last field
    - Do we need to merge them now?
      - Yes, or [up-disable="form-group"] would only disable a single field with up.validate(form)
  - It would not be a problem to start with a field lookup and then go to everything individually
    - However, which render option would work? first? last?
    - Options are currently
      - parser.boolean('feedback')
        - we could || them together, so if any wants feedback they all get it
      - parser.boolean('disable')
        - we collect it all, do it manually and set { disable: false } for the up.submit() call
        - we cannot make up.render({ disable: [array] }) since { disable: 'form-group' } each needs its own { origin }
      - parser.string('event') (does not matter here)
      - parser.number('delay') (we could ignore the option for manual calls)
  - Docs
- This is not true in migrate/form: up.migrate.warn('up.form.config.observeDelay has been renamed to up.form.config.observeOptions.delay')
  - This should just rename the property from `up.form.config.observeDelay` to `up.form.config.observeChangeDelay`
- Support disable attrs in up.FormValidator
  - We would need to collect and execute disable options for each solution!
    - e.g. a validation with two inputs and { disable: 'form-group' } should disable both form groups
    - up.form.disable() already ignores fields that are already disabled, so we can call it multiple times
  - I don't think we currently track disable options per-solution?
    - No, but we could easily
  - If we do this we must set { disable: false } for the submit()
- Test [up-validate] features
  - Test that we can use [up-validate] with another event and a delay
  - Test that [up-validate] will not make a request if the target is removed while waiting for the delay
  - Test that multiple [up-validate] requests are merged into a single request
- Do we want a shortcut macro for this:
      <input up-validate up-keep up-observe-event="input">
  - <input up-live-validate>



Various changes
---------------

- Merge up.migrate.handleScrollOptions into up.migrate.preprocessRenderOptions
- Remove RenderOptions.addCallback
- Should we get rid of up.fail()?
  - This just spams the error log with duplicate errors
  - It's nice that it's an expression, but it weirds up stacktraces
- Rethink request defaults
  - Rethink whether we want to link up.request() to the current layer by default?
    - Or only when { layer } or { origin } options are given?
    - We could argue that this is a low-level API and up.render() should be used for updating content
    - Counter-point is: All other functionality sees the current layer by default
    - If we do this we should also remove auto-lookup of { targetElements }
  - When instantiating an up.Request with neither { target } or { targetElements }, do we want to default to @layer.element ?
- Do follow links with [target=_self]
- makeLayers([{ content }]) leaves <up-wrapper> elements in the DOM
- up.layer.config.externalOverlaySelectors
  - Hier würden wir keinen Fokus stehlen
  - Hier würden wir keinen background dismissable durchführen
- Expose and test up.layer.config.overlay.class
  - Use case was a .default class
- up:click forking could print a warning when an a[href] is instant, but not followable
- unpoly-rails must have up.validate_names instead of up.validate_name
- Allow to mark a target component as soft:
  - .target, .other:maybe
  - .target, :maybe(.other)
- unpoly-rails should discard invalid JSON: https://zammad.makandra.de/#ticket/zoom/76579
- Test that setting autoCache = false for a route also prevents an a[up-preload]
  - up.Request sets cache = true if preload is set!
- Maybe log close value with up:layer:dismiss/:dismissed/:accept/:accepted
- Make sure that up:layer:dismiss/:dismissed/:accept/:accepted expose { value }
  - Presence form does not in the docs
- Make sure that up:layer:dismiss/:dismissed/:accept/:accepted expose { origin }
  - At least key dimissalm outside does not
- For overlays with a backdrop, don't listen to click on parent.element
  - This fixes cases where other overlay libs append elements to document.body
  - For modes without a backdrop (popup), people can prevent up:overlay:dismiss if they don't like the { origin }
- up.form.submitButtons is documented, but not public
- Fix clicking on a label[for] when there are elements with duplicate IDs in another layer
- Scroll behavior should be { behavior: 'instant' }, not 'auto'
- Destruction of observe watches
  - Test that observe watches automatically disappear when the element is detached
  - Test that observe callbacks are not called if the element is detached while waiting for the delay
  - When someone registers an unobserve-function as a destructor, print a message that this is not necessary anymore


Docs
----

- Is it weird that up.layer.affix appends to the first swappable element instead of the contentElement?
  - It's actually more like "appendableElement"
  - Maybe offer up.Layer#append
- Consider exposing up.layer.contentElement
- Document { abort } option and link everywhere
- Überall wo [up-target] oder { target } dokumentiert ist nach https://unpoly.com/fragment-placement verlinken
- Test and Document that we can use live validation like this:
  <input up-keep up-validate up-observe-event="input">
- Document that multiple [up-validate] requests are merged into a single request
  - Document that X-Up-Validate may contain multiple names
  - Document that X-Up-Validate may contain :unknown
- Document django-forms-dynamic for [up-validate]
  - https://twitter.com/j4mie/status/1471610935924215815?t=KtCISFJXz3kEMoc6C3y4UQ&s=09
  - https://github.com/dabapps/django-forms-dynamic
- Document [up-verify-cache], render({verifyCache}) and up.fragment.config.autoVerifyCache
  - This may be a new caching page
- New observe() and validate() options
  - { feedback, disable, delay, event }
- [up-observe-feedback], [up-observe-disable],  [up-observe-delay],  [up-observe-event]
  - [up-autosubmit] needs a params note saying that that attributes for [up-observe] may be used
  - [up-validate] needs a params note saying that that attributes for [up-observe] may be used
  - Explain that they can be set either on the form or on an input
- up.form.config.disable
- up.form.config.feedback
- up.form.config.observeInputEvent
- up.form.config.observeChangeEvent
- up.form.config.observeInputDelay
- Consider consolidating docs for
  - input[up-observe]/form[up-observe] as well as
  - input[up-validate]/form[up-validate]
  - input[up-autosubmit]/form[up-autosubmit]
  - ... so it's only "within the container"
- Missing docs for render options
  - { revealTop }
  - { revealMax }
  - { revealPadding }
  - { revealSnap }
  - { scrollBehavior }
    - if we stop auto-set it to auto, otherwise stop parsing this



Icebox
======

- Introduce boundaries or "softly isolated zones"
  - The idea started with: Should fragment lookups with an { origin } within a form prefer to look within the form?
    - Also related to https://github.com/unpoly/unpoly/issues/197 , which would no longer work
      now that a form submission's orgin is the submit button instead of the form element
  - E.g. <div up-boundary>
    - Lookups within prefer to match within the boundary
    - It's a new fallback target
      - Also for errors
    - up.fragment.config.boundaryTargets = ['[up-boundary]', 'form', ':main']
    - Is this also controlled by { fallback }?
    - Maybe identification using [up-boundary=123]
      - But don't enforce this, it's not a great auto-target
    - Should this rather be [up-zone]?
      - If we ever make fully isolated containers we would call them frames
        - https://github.com/unpoly/unpoly/discussions/350
    - We could also offer :zone as a selector
    - Would we still offer { target: '.container .child' }?
      - Would we offer { target: ':zone .foo' }, since it's really the same as { target: '.foo' } ?
    - Is this a repetition of "fragment needs to know whether it is used as component or main target"?
      - We would need to fix infinite looping in expandTargets()
      - It would be nice to disable history in a zone
        - but then it's not usable as a main target
        - Disable history in a container?
          - It's weird to nest multiple containerish elements
        - => This is really already solved through { history: 'auto' }, which only updates history if updating :main
- Rendering: allow { scrollBehavior: 'smooth' } when we're not morphing
  - Could we even allow this *when* morphing?
- What is the purpose of up.error.emitGlobal?
  - Don't we throw a compound error that would be tracked?
    - We do
    - But the error does not bubble up
    - What do we want here?
- New up.render() options to clone from a template
  - { documentTemplate }, { fragmentTemplate }, { contentTemplate }
  - Separate doc page "Rendering from local content"
  - Fail when template cannot be found
  - But what if I really need to re-use an existing element that is then placed back into the body, like in WB?
- Consider implementing an abortable up:navigate event
  - This would be the first feature that goes beyond "navigation is just a preset"
  - People might expect history changes to trigger this
  - Maybe think about this more
- Consider renaming "*observe*" to "*watch*"
  - Maybe take this opportunity to change the attribute?
    - <form up-watch up-watch-event="change" up-on-changed="...">
    - up.watch(field, 'change', function() { ... })
    - Keep the callback signature like it is
- Allow to prevent Unpoly's state restoration handling with a preventable up:history:restore
  - We're currently forwarding an event up:history:restore to up:location:changed, but that was never public API
- Replace up.hello() and up.syntax.clean() to MutationObserver()
- Do we want to serialize all actions in a form?
  - up-sequence="form"
  - This would need to abortable on submit => Would be handled by existing { solo: 'target' } IF there is a request
  - This would need to abortable on form destroy => Would be handled by existing { solo: 'target' } IF there is a request
  - => This would need to be handled by up.Queue, or else there would be nothing to abort
  - => It is not sufficient to have up.form.sequence(..., callback)
  - => We would need to do something like { sequence: ElementOfSubtree }
  - => Before picking a new request, make sure no existing request exists
  - What about our old idea: { order: 'abort target', order: 'abort form', order: 'after form', order: 'after selector' }
      => How to say "after ElementObject" ?
  - Who would fetch the element that is 'form' or 'selector'?
      => up.Change.UpdateLayer#getPreflightProps(), which already loads targetElements()
  - What would we do if both was given, e.g. { solo: true, sequence: 'form' }
    - Do we forbid the combination?
    - Do we first abort, then do a squence?
    - Do we first wait, then abort? => I think this, but this also means our { solo } handling is in the wrong place. It must move to the queue.
  - Does { sequence: 'form' } also queue local content, like { solo } ?
   - We could do something like up.LocalRequest, but then local updates would no longer be sync!
   - We could not support { sequence } for local updates => YES
  - What about cached content with { sequence }?
    - We could do queue.asapLocal() which immediately executes unless there is { sequence }
  - How does queue resolve a sequence?
    - Before dispatching a request with { sequence }
    - Check if we have *current* requests with { sequence }
    - If any of the other requests's sequence contains our *or* if any other sequence is contained by ours, don't dispatch
- Guard Events for Rendering could have a Promise for "done"
  - Is this better than setting event.renderOptions.onFinished()?
    - Yes, because onFinished may not fire for fatals or prevented up:fragment:loaded
  - How would this work together with future up.RenderRequest?
  - How would this work together with "local changes are sync"?
- Consolidate [up-validate], [up-switch] and [up-observe] into a tree of form dependencies
  - This way we can selectively disable parts of the form
- Functionality that checks for isDetached() should probably also check for .up-destroying
- Improve `{ focus: 'keep' }` so it focuses the former form group if we lose focus
  - This may be easier said than done
    - we would need to remember the original form group before the swap in the FocusCapsule
    - re-discover the form group in the new HTML
    - check that the form group is a closer match than target-if-lost
    - come up for a better name for the option (target-if-lost)
- New event up:request:solo ?
- Consider delaying appending of new layer elements until we have constructed all children https://github.com/unpoly/unpoly/discussions/314
- CheapEnergy hatte bedarf auf "[up-validate] on input"
- CheapEnergy hatte bedarf auf "[up-validate] mit delay"
- Publish { onQueued }
  - More canonic would be if up.render() returned a up.RenderRequest, which has abort().
- Wir aborten bereits laufende [up-validate] wenn das Formular submitted, wird, aber laufende Observer-Delays warten können danach noch Dinge tun
  - Wie wäre "submit stoppt das delay"?
  Evtl. Warnung ausbauen: "Will not observe fields without [name]"
- [up-emit] auf Buttons erlauben
- Beim Schließen des Modals prevented jemand up:layer:dismiss, und dann steht "Abort Error: Close event was prevented" in der Konsole.
  - Wollen wir das schlucken?
  - Zumindest bei ui-elementen wie [up-dismiss] ?
- DestructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.destroy() noch zu Ende läuft, dann aber up.CompilerError wirft.
- ConstructorPass sammelt zwar Exceptions, aber wirft am Ende. Wer fängt das dann? Der Wunsch wäre, dass das drumrumliegende up.render() oder up.hello() noch zu Ende läuft, dann aber mit up.CompilerError rejected.
- Update "Long Story" Slides with new API
- Doc page about "Fragments from local HTML"
  - link from [up-document], [up-fragment], [up-content], { document, fragment, content }.
- Warn when registering compiler in [up-] namespace
- Do we need window.history.scrollRestoration = 'manual' ?
  - Is this setting per-state?
